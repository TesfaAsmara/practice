[
  {
    "objectID": "usaco_chapter1_gift1.html",
    "href": "usaco_chapter1_gift1.html",
    "title": "gift1",
    "section": "",
    "text": "'''\nID: tgac2021\nLANG: PYTHON3\nTASK: gift1\n'''\n# Input and output\nfin = open(\"gift1.in\", \"r\")\nfout = open(\"gift1.out\", \"w\")\n\n# Read in the file (stripping \\n)\nlines = [line.strip() for line in fin.readlines()]\n\n# Store NP\nNP = int(lines[0])\n\n# Store the friends as a dictionary\nfriends = dict.fromkeys(lines[1:NP+1], 0)\n\ndef gift_giving(friends, gift):\n    # the giver\n    giver = gift[0]\n    \n    # the amount, to be divided among (in int)\n    amount, divisor = [int(x) for x in gift[1].split()]\n\n    if divisor != 0:\n        #  giver keeps reminder, loses amount\n        friends[giver] += (amount % divisor) - amount\n\n        # friends get even donation\n        donation = int(amount/divisor) \n        for i in range(divisor):\n            friends[gift[i + 2]] += donation\n    \n        # Return where to continue reading in the file\n        return divisor + 2 # for reading the giver and gift\n    else:\n        return 2 # for reading the giver and gift\n\n\ni = NP+1\nwhile i < len(lines):\n    i += gift_giving(friends, lines[i:])\n\nfor friend, net_value in friends.items():\n    fout.write(f\"{friend} {net_value}\\n\")"
  },
  {
    "objectID": "usaco_chapter1_beads.html",
    "href": "usaco_chapter1_beads.html",
    "title": "beads",
    "section": "",
    "text": "'''\nID: tgac2021\nLANG: PYTHON3\nTASK: beads\n'''\n\nfin = open(\"beads.in\", \"r\")\n\nN = int(fin.readline().strip())\nbeads = fin.readline().strip()\n\npre = ppre = ''\nnum = w_num = 0\nmax_num = 0\ni = 0"
  },
  {
    "objectID": "pc_1.6.html",
    "href": "pc_1.6.html",
    "title": "1.6",
    "section": "",
    "text": "1.6.2\n\nMinesweeper\n\nI did not get it on the first attempt.\n\n# for the number of lines\n# and columns of the field, respectively. \n# Each of the next n lines contains exactly m\n# characters, representing the field.\n\ndef minesweeper(file):\n    fin = open(file, \"r\")\n    fout = open(file.replace(\".in\", '.out'), \"w\")\n\n    input = [x.strip() for x in fin.readlines()]\n    def count_mines(i, j, arr):\n        for vertical in [-1, 0, 1]:\n            for horizontal in [-1, 0, 1]:\n                vertical  = i + vertical\n                horizontal = j + horizontal\n                if vertical < len(arr) and horizontal < len(arr[0]):\n                    position = arr[vertical][horizontal]\n                    at_mine_position = vertical == horizontal == 0\n                    not_already_mine = position != \"*\"\n                    if (at_mine_position):\n                        position = \"*\"\n                    elif (not_already_mine):\n                        position += 1\n        return arr\n\n    def read(index):\n        n, m = [int(x) for x in input[index].split()]\n        if (n != 0) and (m != 0):\n            arr = [[0 for i in range(m)] for i in range(n)]\n            for i in range(n):\n                for j in range(m):\n                        cur_char = input[i+1][j]\n                        if cur_char == \"*\":\n                            arr = count_mines(i, j, arr)\n            for i, row in enumerate(arr):\n                arr[i] = \"\".join(str(x) for x in row) + \"\\n\"\n            return arr, index+n\n    \n    index = 0\n    results = []\n    file_not_done = index < len(input)\n    while file_not_done:\n        index = read(index)\n    \n    output = \"\"\n    for i, result in enumerate(results):\n        output += f\"Field #{i}:\\n\" + \"\".join(str(x) for x in result)\n    print(output)\n    fout.write(output)\n#minesweeper(\"1.6.2.in\")\n\nI did get it on the second attempt\n\ndef minesweeper2(file):\n    fin = open(file, \"r\")\n    fout = open(file.replace(\".in\", \".out\"), \"w\")\n\n    def count_mines(arr):\n        num_x = len(arr)\n        num_y = len(arr[0])\n        field = [[0 for i in range(num_y)] for i in range(num_x)]\n        for i in range(num_x):\n            for j in range(num_y):\n                position = arr[i][j]\n                if position == \"*\":\n                    field[i][j] = '*'\n                    for row in [i+1,i, i-1]:\n                        if row >= 0 and row < num_x:\n                            for col in [j+1,j, j-1]:\n                                if col >= 0 and col < num_y:\n                                        if field[row][col] != \"*\":\n                                            field[row][col] += 1\n        output = \"\"\n        for i, row in enumerate(field):\n            output += \"\".join(str(x) for x in row) + \"\\n\"\n        return output\n    \n    input = [line.strip() for line in fin.readlines()]\n    file_index = 0\n    output = ''\n    counter = 0\n    while file_index < len(input):\n        n, m = [int(x) for x in input[file_index].split()]\n        if n == 0:\n            break\n        else:\n            counter += 1\n            start = file_index+1\n            stop = file_index+n+1\n            output += f\"Field #{counter}:\\n{count_mines(input[start:stop])}\\n\"\n            file_index = stop\n    fout.write(output)\nminesweeper2(\"1.6.2.in\")\n\n\n\n1.6.3\n\nThe Trip\n\n\ndef equalize_cost(file):\n    fin = open(file, \"r\") \n    fout = open(file.replace(\".in\", \".out\"), \"w\")\n\n    input = [float(f\"{float(line.strip()):2f}\") for line in fin.readlines()]\n\n    def read(expenses):\n        #str(max(abs(x) for x in [x - y if i != j else -1 for i, x in enumerate(expenses) for j, y in enumerate(expenses)]))\n        return sum([x if x > 0 else 0 for x in list(map(lambda x: x - float(f\"{sum(expenses)/len(expenses):2f}\"), expenses))])\n    \n    file_index = 0\n    output = \"\"\n    while file_index < len(input):\n        n = int(input[file_index])\n        if n != 0:\n            start = file_index+1\n            stop = file_index+n+1\n            output += f\"{read(input[start:stop]):2f}\\n\"\n            file_index = stop\n        else:\n            break\n    fout.write(output)\nequalize_cost('1.6.3.in')\n\n\n\n1.6.4\n\nLCD Display\n\n\ndef display(file):\n    fin = open(file, \"r\")\n    fout = open(file.replace(\".in\", \".out\"), \"w\")\n\n    input = [line.split() for line in fin.readlines()]\n    \n    def print_lcd(spec):\n        s = int(spec[0])\n        rows = 2*s+3\n        cols = s + 2\n\n        \n        \n        def top_left_col(arr):\n            for i in range(1, 1+s):\n                arr[i][0] = \"|\"\n        \n        def bot_left_col(arr):\n            for i in range(int(rows/2)+1, int(rows/2)+1+s):\n                arr[i][0] = \"|\"\n        \n        def top_right_col(arr):\n            for i in range(1, 1+s):\n                arr[i][-1] = \"|\"\n        \n        def bot_right_col(arr):\n            for i in range(int(rows/2)+1, int(rows/2)+1+s):\n                arr[i][-1] = \"|\"\n        \n        def top_row(arr):\n            for i in range(1, 1+s):\n                arr[0][i] = \"-\"\n        \n        def mid_row(arr):\n            for i in range(1, 1+s):\n                arr[int(rows/2)][i] = \"-\"\n        \n        def bot_row(arr):\n            for i in range(1, 1+s):\n                arr[-1][i] = \"-\"\n\n        # hori = \" \" + \"-\"*s + \"\\n\"\n        # vertl = \" \" + \"|\\n\"*s \n        # vertl_forlANDr = \" \" + \"|\" + \" \"*s \n        # vertr = \"\\n\" + \" \"*s + \"|\\n\" \n        nums = spec[1]\n        fit_vert = int(rows/(s+1))\n        fit_hori = int(cols/(s+1))\n        output = []\n        for num in nums:\n            lcd = [[\" \" for col in range(cols)] for row in range(rows)]\n            if num == \"1\":\n                top_left_col(lcd)\n                bot_left_col(lcd) \n            elif num == \"2\":\n                top_row(lcd)\n                top_right_col(lcd)\n                mid_row(lcd)\n                bot_left_col(lcd)\n                bot_row(lcd)\n            elif num == \"3\":\n                top_row(lcd)\n                top_right_col(lcd)\n                mid_row(lcd)\n                bot_right_col(lcd)\n                bot_row(lcd)\n            elif num == \"4\":\n                top_left_col(lcd)\n                top_right_col(lcd)\n                mid_row(lcd)\n                bot_right_col(lcd)\n            elif num == \"5\":\n                top_row(lcd)\n                top_left_col(lcd)\n                mid_row(lcd)\n                bot_right_col(lcd)\n                bot_row(lcd)\n            elif num == \"6\":\n                top_row(lcd)\n                top_left_col(lcd)\n                mid_row(lcd)\n                bot_left_col(lcd)\n                bot_right_col(lcd)\n                bot_row(lcd)\n            elif num == \"7\":\n                top_row(lcd)\n                top_right_col(lcd)\n                bot_right_col(lcd)\n            elif num == \"8\":\n                top_row(lcd)\n                top_left_col(lcd)\n                top_right_col(lcd)\n                mid_row(lcd)\n                bot_left_col(lcd)\n                bot_right_col(lcd)\n                bot_row(lcd)\n            elif num == \"9\":\n                top_row(lcd)\n                top_left_col(lcd)\n                top_right_col(lcd)\n                mid_row(lcd)\n                bot_right_col(lcd)\n                bot_row(lcd)\n            elif num == \"0\":\n                top_row(lcd)\n                top_left_col(lcd)\n                top_right_col(lcd)\n                bot_left_col(lcd)\n                bot_right_col(lcd)\n                bot_row(lcd)\n\n            for i, list in enumerate(lcd):\n                lcd[i] = \" \".join(list)\n            output.append(lcd)\n            \n        result = [\"\" for row in range(rows)]\n        for i, list in enumerate(output):\n            for row in range(rows):\n                result[row] += output[i][row]\n        for row in result:\n            fout.write(f\"{row}\\n\")\n        fout.write(\"\\n\")\n    for item in input:\n        print_lcd(item)\n\ndisplay(\"1.6.4.in\")\n\n\n\n1.6.5\n\nGraphical Editor\n\n\ndef graphical_editor(file):\n    fin = open(file, \"r\")\n    fout = open(file.replace(\".in\", \".out\"), \"w\")\n\n    input = [line.split() for line in fin.readlines()]\n\n    def find_region_r(x, y, image, region):\n        rows = len(image)\n        cols = len(image[0])\n        cur_pix = image[x][y]\n        n_pix = image[x][y+1] if y+1 < cols else \"\"\n        n_cor = [x, y+1] if y+1 < cols else []\n        e_pix = image[x+1][y] if x+1 < rows else \"\"\n        e_cor = [x+1, y] if x+1 < rows else []\n        s_pix = image[x][y-1] if y-1 > 0 else \"\"\n        s_cor = [x, y-1] if y-1 > 0 else [] \n        w_pix = image[x-1][y] if x-1 > 0 else \"\"\n        w_cor = [x-1, y] if x-1 > 0 else []\n        if cur_pix == n_pix and n_cor not in region:\n            region.append(n_cor)\n            region.append(find_region_r(n_cor[0], n_cor[1], image, region))\n        elif cur_pix == e_pix and e_cor not in region:\n            region.append(e_cor)\n            region.append(find_region_r(e_cor[0], e_cor[1], image, region))\n        elif cur_pix == s_pix and s_cor not in region:\n            region.append(s_cor)\n            region.append(find_region_r(s_cor[0], s_cor[1], image, region))\n        elif cur_pix == w_pix and w_cor not in region:\n            region.append(w_cor)\n            region.append(find_region_r(w_cor[0], w_cor[1], image, region))\n        return region\n\n    def parse_command(list, image):\n        command  = list[0]\n        if command.startswith(\"I\"):\n            m, n = command[1], command[2]\n            m = int(m)\n            n = int(n)\n            image = [[\"O\" for col in range(m)] for row in range(n)]\n        elif command.startswith(\"C\"):\n                for row in image:\n                    for col in image:\n                        image[row][col] = \"O\"\n        elif command.startswith(\"L\"):\n            x, y, c = command[1], command[2], command[3]\n            col = int(x)\n            row = int(y)\n            image[row][col] = c\n        elif command.startswith(\"V\"):\n            x, y1, y2, c = command[1], command[2], command[3], command[4]\n            for row in range(y1, y2+1):\n                image[row][x] = \"c\"\n        elif command.startswith(\"H\"):\n            x1, x2, y, c = command[1], command[2], command[3], command[4]\n            for col in range(x1, x2+1):\n                image[y][col] = c\n        elif command.startswith(\"K\"):\n            x1, y1, x2, y2, c =command[1], command[2], command[3], command[4], command[5]\n            for row in range(y1, y2+1):\n                for col in range(x1, x2+1):\n                    image[row][col] = c        \n        elif command.startswith(\"F\"):\n            x, y, c = command[1], command[2], command[3]\n            col = int(x)\n            row = int(y)\n            region = [row, col]\n            region_cors = find_region_r(row, col, image, region)\n            for cor in region_cors:\n                row = cor[0]\n                col = cor[1] \n                image[row][col] = c\n        elif command.startswith(\"S\"):\n            name = list[1]\n            output = f\"{name}\\n\"\n            for i, row in enumerate(image):\n                output+= \"\".join(row) + \"\\n\"\n            fout.write(output)\n        elif command.startswith(\"X\"):\n            quit()\n        return image\n    image = []\n    for command in input:\n        image = parse_command(command, image)\n            \n#graphical_editor(\"1.6.5.in\")\n\nIndexError: string index out of range\n\n\n\ndef compute_nesw(cors):\n    rows = cors[0]\n    cols = cors[1]\n    return [(rows, cols+1), (rows-1, cols), (rows, cols-1), (rows+1, cols)]\n\nclass Image:\n    def I(self, m, n):\n        self.num_cols = m\n        self.num_rows = n\n        self.image = [[\"O\" for m in range(self.num_cols)] for n in range(self.num_rows)]\n\n    def C(self):\n        for row in range(self.num_rows):\n            for col in range(self.num_cols):\n                pixel = self.image[row][col]\n                if  pixel != \"O\":\n                    pixel = \"O\"\n    \n    def L(self, x, y, c):\n        col = x\n        row = y\n        self.image[row][col] = c\n    \n    def V(self, x, y1, y2, c): # Error\n        col = x\n        rowStart = y1\n        rowEnd = y2+1\n        self.image[rowStart:rowEnd][col] = c\n    \n    def H(self, x1, x2, y, c):\n        startCol = x1\n        endCol = x2+1\n        row = y\n        self.image[row][startCol:endCol] = c\n    \n    def K(self, x1, y1, x2, y2, c):\n        startCol = x1\n        endCol = x2+1\n        startRow = y1\n        endRow = y2+1\n        self.image[startRow:endRow][startCol:endCol] = c \n\n    def F(self, x, y, c):\n        col = x\n        row = y\n        region = set((row, col))\n        pix_col = self.image[row][col]\n        com_side_cors = compute_nesw((row, col))\n        for cor in com_side_cors:\n            if cor not in region:\n                cs_row = cor[0]\n                cs_col = cor[1]\n                cs_pix_col = self.image[cs_row][cs_col]\n                if cs_pix_col == pix_col:\n                    region.add(cor)\n        \n        for cor in region: # Error\n            r_row = cor[0]\n            r_col = cor[1]\n            self.image[r_row][r_col] = c\n    \n    def S(self, name, file):\n        file.write(f\"{name}\\n\")\n        for i, row in enumerate(self.image):\n            file.write(\"\".join(row) + \"\\n\")\n    \n\n    \n\n    \n\ndef graphical_editor2(file):\n    fin = open(file, \"r\")\n    fout = open(file.replace(\".in\", \".out\"), \"w\")\n\n    input = [line.split() for line in fin.readlines()]\n\n    for line in input:\n        command = line[0]\n        if command == \"I\":\n            m = int(line[1])\n            n = int(line[2])\n            image = Image()\n            image.I(m, n)\n        elif command == \"C\":\n            image.C()\n        elif command == \"L\":\n            x = int(line[1])\n            y = int(line[2])\n            c = line[3]\n            image.L(x, y, c)\n        elif command == \"V\":\n            x = int(line[1])\n            y1 = int(line[2])\n            y2 = int(line[3])\n            c = line[4]\n            image.V(x, y1, y2, c)\n        elif command == \"H\":\n            x1 = int(line[1])\n            x2 = int(line[2])\n            y = int(line[3])\n            c = line[4]\n            image.H(x1, x2, y, c)\n        elif command == \"K\":\n            x1 = int(line[1])\n            y1 = int(line[2])\n            x2 = int(line[3])\n            y2 = int(line[4])\n            c = line[5]\n            image.K(x1, y1, x2, y2, c)\n        elif command == \"F\":\n            x = int(line[1])\n            y = int(line[2])\n            c = line[3]\n            image.F(x, y, c)\n        elif command == \"S\":\n            name = line[1]\n            image.S(name, fout)\n        elif command == \"X\":\n            break\ngraphical_editor2(\"1.6.5.in\")\n\n(2, 3)\n3\n(3, 4)\n(4, 3)\n\n\nIndexError: list assignment index out of range"
  },
  {
    "objectID": "oopython_chapter2.html",
    "href": "oopython_chapter2.html",
    "title": "Object-Oriented Python: Chapter 2",
    "section": "",
    "text": "# OO_LightSwitch\n\nclass LightSwitch():\n    def __init__(self):\n        self.switchIsOn  = False\n    \n    def turnOn(self):\n        self.switchIsOn = True\n    \n    def turnOff(self):\n        self.switchIsOn = False\n\noLightSwitch  = LightSwitch()\n\nclass <ClassName>():\n\ndef __init__(self, <optional param1>, ..., <optional paramN>):\n          #  any initialization code here\n      \n      # Any number of functions that access the data\n      # Each has the form:\n      \ndef <functionName1>(self, <optional param1>, ..., <optional paramN>):\n          #  body of function\n\n      #  ... more functions\n\ndef <functionNameN>(self, <optional param1>, ..., <optional paramN>):\n          #  body of function"
  },
  {
    "objectID": "oopython_chapter1.html",
    "href": "oopython_chapter1.html",
    "title": "Object-Oriented Python: Chapter 1",
    "section": "",
    "text": "# File: HigherOrLower.py\n\n# HigherOrLower\nimport random\n\n# Card constants\nSUIT_TUPLE = ('Hearts', 'Diamonds', 'Spades', 'Clubs')\nRANK_TUPLE = ('Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'King', 'Queen')\n\nNCARDS = 8\n\n# Pass in a deck and this function returns a random card from the deck\ndef getCard(deckListIn):\n    thisCard = deckListIn.pop() # pop one off the top of the deck \n    # and return\n    return thisCard\n\n# Pass in a deck and this function returns a shuffled copy of the deck\ndef shuffle(deckListIn):\n    deckListOut = deckListIn.copy() # make a copy of the starting deck\n    random.shuffle(deckListOut)\n    return deckListOut\n\nprint(\"Welcome to Higher or Lower.\")\nprint(\"You have to choose whether the next card shown to you will be higher or lower than the current card.\")\nprint(\"Getting it right adds 20 points; get it wrong and you lose 15 points.\")\nprint(\"You have 50 points to start.\")\nprint()\n\nstartingDeckList = []\n\nfor suit in SUIT_TUPLE:\n    for thisValue, rank in enumerate(RANK_TUPLE):\n        cardDict = {'rank': rank, 'suit': suit, 'value':thisValue+1}\n        startingDeckList.append(cardDict)\n\nscore = 50\n\nwhile True: # Play multiple games\n    print() \n    gameDeckList = shuffle(startingDeckList)\n    currentCardDict = getCard(startingDeckList)\n    currentCardRank = currentCardDict['rank']\n    currentCardSuit = currentCardDict['suit']\n    currentCardValue = currentCardDict['value']\n    print('Starting card is:', currentCardRank + ' of ' + currentCardSuit)\n    print()\n\n    for cardNumber in range(0, NCARDS): # Play one game of this many cards\n        answer = input(\"Will the next card be higher or lower than the \" + currentCardRank + ' of ' + currentCardSuit + \"? (enter h or l):\")\n        answer = answer.casefold() # force lowercase\n        nextCardDict = getCard(gameDeckList)\n        nextCardRank = nextCardDict['rank']\n        nextCardSuit = nextCardDict['suit']\n        nextCardValue = nextCardDict['value']\n        print(\"Next card is:\", nextCardRank + ' of ' + nextCardSuit)\n\n        if answer == 'h':\n            if nextCardValue > currentCardValue:\n                print(\"You got it right, it was higher!\")\n                score += 20\n            else:\n                print(\"Sorry, it was not higher.\")\n                score -= 15\n        elif answer == 'l':\n            if nextCardValue < currentCardValue:\n                print(\"You got it right, it was lower!\")\n                score += 20\n            else:\n                print(\"Sorry, it was not lower.\")\n                score -= 15\n            \n        print('Your score is:', score)\n        print()\n        currentCardRank = nextCardRank\n        currentCardValue = nextCardValue # don't need current suit\n\n    goAgain = input(\"To play again, press ENTER, or 'q' to quit:\")\n    if goAgain == 'q':\n        break\n\nprint(\"OK bye\")\n\nWelcome to Higher or Lower.\nYou have to choose whether the next card shown to you will be higher or lower than the current card.\nGetting it right adds 20 points; get it wrong and you lose 15 points.\nYou have 50 points to start.\n\n\nStarting card is: Queen of Clubs\n\nNext card is: Queen of Hearts\nSorry, it was not higher.\nYour score is: 35\n\nNext card is: 10 of Spades\nSorry, it was not higher.\nYour score is: 20\n\nNext card is: King of Clubs\nYou got it right, it was higher!\nYour score is: 40\n\nNext card is: 6 of Diamonds\nSorry, it was not higher.\nYour score is: 25\n\nNext card is: 8 of Hearts\nYou got it right, it was higher!\nYour score is: 45\n\nNext card is: 9 of Hearts\nYou got it right, it was higher!\nYour score is: 65\n\nNext card is: 9 of Diamonds\nSorry, it was not higher.\nYour score is: 50\n\nNext card is: Ace of Clubs\nSorry, it was not higher.\nYour score is: 35\n\nOK bye"
  },
  {
    "objectID": "oopython_chapter1.html#implementation-2single-account-with-functions",
    "href": "oopython_chapter1.html#implementation-2single-account-with-functions",
    "title": "Object-Oriented Python: Chapter 1",
    "section": "Implementation 2—Single Account with Functions",
    "text": "Implementation 2—Single Account with Functions\n\n# File: Bank2_OneAccountWithFunctions.py\n\n# Non-OOP\n# Bank 2\n# Single account\n\naccountName = ''\naccountBalance = 0\naccountPassword = ''\n\ndef newAccount(name, balance, password):\n    global accountName, accountBalance, accountPassword\n    accountName = name\n    accountBalance = balance\n    accountPassword = password\n\ndef show():\n    global accountName, accountBalance, accountPassword\n    print(\"     Name\", accountName)\n    print(\"     Balance\", accountBalance)\n    print(\"     Password\", accountPassword)\n    print()\n\ndef getBalance(password):\n    global accountName, accountBalance, accountPassword\n    if password != accountPassword:\n        print(\"Incorrect password\")\n        return None\n    return accountBalance\n\ndef deposit(amountToDeposit, password):\n    global accountName, accountBalance, accountPassword\n    if amountToDeposit < 0:\n        print('You cannot deposit a negative amount!')\n        return None\n    \n    if password != accountPassword:\n        print(\"Incorrect password\")\n        return None\n    \n    accountBalance = accountBalance + amountToDeposit\n    return accountBalance\n\ndef withdraw(amountToWithdraw, password):\n    global accountName, accountBalance, accountPassword\n\n    if amountToWithdraw < 0:\n        print('You cannot withdraw a negative amount')\n        return None\n    \n    if password != accountPassword:\n        print('You cannot withdraw more than you have in your account')\n        return None\n    \n    accountBalance = accountBalance - amountToWithdraw\n    return accountBalance\n\nnewAccount(\"Joe\", 100, \"soup\")\n\nwhile True:\n    print()\n    print(\"Press b to get the balance\")\n    print('Press d to make a deposit')\n    print(\"Press w to make a withdrawal\")\n    print(\"Press s to show the account\")\n    print(\"Press q to quit\")\n    print()\n    action = input(\"What do you want to do? \")\n    action = action.lower() # force lowercase\n    action = action[0] # just use first letter\n    print()\n\n    if  action == 'b':\n        print(\"Get Balance:\")\n        userPassword = input(\"Please enter the passsword: \")\n        theBalance = getBalance(userPassword)\n        if theBalance is not None:\n            print(\"Your balance is:\", theBalance)\n    elif action == 'd':\n        print(\"Deposit:\")\n        userDepositAmount = input('Please enter amount to deposit: ')\n        userDepositAmount = int(userDepositAmount)\n        userPassword = input(\"Please enter the password: \")\n\n        newBalance = deposit(userDepositAmount, userPassword)\n        if newBalance is not None:\n            print(\"Your new balance is:\", newBalance)\n    elif action == 's':\n        show()\n    elif action == 'q':\n        break\n    elif action == 'w':\n        print(\"Withdraw:\")\n        userWithdrawAmount = input(\"Please enter amount to withdraw: \")\n        userWithdrawAmount = int(userWithdrawAmount)\n        userPassword = input(\"Please enter the password: \")\n        \n        newBalance = withdraw(userWithdrawAmount, userPassword)\n        if newBalance is not None:\n            print('Your new balance is:', newBalance)\n\n    print('Done')\n\n\nPress b to get the balance\nPress d to make a deposit\nPress w to make a withdrawal\nPress s to show the account\nPress q to quit\n\n\nGet Balance:\nYour balance is: 100\nDone\n\nPress b to get the balance\nPress d to make a deposit\nPress w to make a withdrawal\nPress s to show the account\nPress q to quit\n\n\n     Name Joe\n     Balance 100\n     Password soup\n\nDone\n\nPress b to get the balance\nPress d to make a deposit\nPress w to make a withdrawal\nPress s to show the account\nPress q to quit"
  },
  {
    "objectID": "usaco_chapter1_friday.html",
    "href": "usaco_chapter1_friday.html",
    "title": "friday",
    "section": "",
    "text": "'''\nID: tgac2021\nLANG: PYTHON3\nTASK: friday\n'''\n\nfin = open(\"friday.in\", \"r\")\nN = int(fin.readline().strip())\ndayOfWeek = {i:0 for i in range(7)}\nday = 0\nmonths = [31, 28, 31, 30, 31, 30, 31, 31,30,31,30,31]\n\nfor year in range(1900, 1900+N):\n    for month in months:\n        dayOfWeek[day%7] += 1\n        if(month==28):\n            if(year % 4 == 0 and year % 100 != 0) or  (year % 100 == 0 and year % 400 == 0):\n                day += 29\n                continue\n        day += month\n\nwith open('friday.out', 'w') as fout:\n    for day in range(6):\n        fout.write(f\"{dayOfWeek[day]} \")\n    fout.write(f\"{dayOfWeek[6]}\\n\")"
  },
  {
    "objectID": "usaco_chapter1_ride.html",
    "href": "usaco_chapter1_ride.html",
    "title": "ride",
    "section": "",
    "text": "'''\nID: tgac2021\nLANG: PYTHON3\nTASK: ride\n'''\n\n# Input and output\nfin = open(\"ride.in\", \"r\")\nfout = open(\"ride.out\", \"w\")\n\n# Read in the comet name, in lowercase\ncomet = fin.readline().lower()\n\n# Read in the group name, in lowercase\ngroup = fin.readline().lower()\n\n# Translation function\ndef translate(name):\n    num = 1\n    for letter in name:\n        num *= ord(letter) - 96 # ord(\"a\") = 97, so we translate by 96 to start at 1\n    return num % 47 \n\nif translate(comet) == translate(group):\n    fout.write(\"GO\\n\")\nelse:\n    fout.write(\"STAY\\n\")"
  }
]